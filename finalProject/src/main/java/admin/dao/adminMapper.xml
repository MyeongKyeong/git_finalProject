<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 
 <!-- 담당 : 이건탁(회원관리/상점관리/상품관리)
 	 	 	김명경(탈퇴사유분석/신고내역관리/1:1문의 관리) -->
<mapper namespace="adminSQL">
	<select id="getMemberList" parameterType="java.util.Map" resultType="member.bean.MemberDTO">
		select * from(select rownum rn, tt.* from(
		select * from members)tt)
		where rn between #{startNum} and #{endNum}
	</select>
<!-- 총글수 -->
	<select id="getTotalA" resultType="Integer">
		select count(*) from members
	</select>
<!-- 회원조건검색 -->
	<select id="getSearchMember" parameterType="java.util.Map" resultType="member.bean.MemberDTO">
		<![CDATA[
		select * from
		(select rownum rn, tt.* from
		(select * from members where ${searchType} like '%'||#{keyword}||'%')tt
		)where rn>=#{startNum} and rn<=#{endNum}
		]]>
	</select>
<!-- 검색한 후 총글수 -->
	<select id="getTotalB" resultType="Integer">
		select count(*) from members where ${searchType} like '%'||#{keyword}||'%'
	</select>
<!-- 상세보기 -->	
	<select id="getMemberView" parameterType="String" resultType="admin.bean.AdminMembersDTO">
		select * from members join store using(mem_id) where mem_id = #{id}
	</select>
<!-- 판매중인물건 총개수 -->
	<select id="totalSellProduct" parameterType="String" resultType="Integer"> 
		select count(*) from members join product using(mem_id) where mem_id = #{id}
	</select>
<!-- 상점리스트출력 -->
	<select id="getStoreList" parameterType="java.util.Map" resultType="store.bean.StoreDTO">
		select * from(select rownum rn, tt.* from(
		select * from store)
		tt)where rn between #{startNum} and #{endNum}
	</select>
<!-- 상점리스트 총개수 -->
	<select id="getTotalC" resultType="Integer">
		select count(*) from store join members using(mem_id)
	</select>
<!-- 상점 상세보기 -->	
	<select id="getStoreView" parameterType="String" resultType="admin.bean.AdminMembersDTO">
		select * from store join members using(mem_id) where mem_id = #{id}
	</select>
<!-- 상점조건검색 -->
	<select id="getSearchStoreList" parameterType="java.util.Map" resultType="store.bean.StoreDTO">
		<![CDATA[
		select * from
		(select rownum rn, tt.* from
		(select * from store where ${searchType} like '%'||#{storeKeyword}||'%')tt
		)where rn>=#{startNum} and rn<=#{endNum}
		]]>
	</select>
<!-- 상점 조건검색 후 총개수 -->
	<select id="getTotalD" parameterType="java.util.Map" resultType="Integer">
		select count(*) from store where ${searchType} like '%'||#{storeKeyword}||'%'
	</select>
	
<!-- 상점상세보기_물건출력 -->	
	<select id="getStore_ProductList" parameterType="String" resultType="product.bean.ProductDTO">
		select * from product where mem_id = #{id} order by product_seq desc
	</select>
<!-- 상점목록_물품리스트에서 삭제 -->
	<delete id="store_productDelete" parameterType="java.util.Map">
		delete product where product_seq in
		<foreach collection="array" item="data" index="i" open="(" close=")" separator=",">
			<!-- ${array[i]} -->
			#{data}
		</foreach>
	</delete>
	
<!-- 물품전체 출력 --> 
	<select id="getProductAllList" parameterType="java.util.Map" resultType="product.bean.ProductDTO">
		select * from(select rownum rn, tt.* from(
					select * from product)tt)
					where rn between #{startNum} and #{endNum}
	</select>
<!-- 전체상품수 -->
	<select id="getTotalE" resultType="Integer">
		select count(*) from product
	</select>
<!-- 물품관련 상세정보 -->
	<select id="getProductView" parameterType="String" resultType="admin.bean.AdminMembersDTO">
		select * from product join members using(mem_id) join store using(mem_id) where product_seq = #{seq}
	</select>
<!-- 물품 조건검색 -->
	<select id="getSearchProductList" parameterType="java.util.Map" resultType="product.bean.ProductDTO">
		<![CDATA[
		select * from
		(select rownum rn, tt.* from
		(select * from product where ${searchType} like '%'||#{productKeyword}||'%')tt
		)where rn>=#{startNum} and rn<=#{endNum}
		]]>
	</select>
<!-- 물품 조건검색_페이징 -->
	<select id="getTotalF" parameterType="java.util.Map" resultType="Integer">
		select count(*) from product where ${searchType} like '%'||#{productKeyword}||'%'
	</select>
<!-- 총 리뷰 개수 -->
 	<select id="storeReviewTotalA" parameterType="String" resultType="int">
   		select count(*)
		from product
        join review using(product_seq)
        where product.mem_id = #{id}
   	</select>
   	
	<select id="getStoreViewOrderby" parameterType="java.util.Map" resultType="product.bean.ProductDTO">
		select * from product where mem_id=#{id}
			<choose>
				<when test="product_manage == 0"><!-- 전체 -->
					order by product_seq desc
				</when>
				<when test="product_manage != 0"><!-- 판매중 -->
					and product_manage=#{product_manage} order by product_seq desc
				</when>
			</choose>
	</select>
	
<!-- [신고내역관리]========================================================================= -->
<!-- A.신고 리스트 전체 출력 -->
   <select id="getComplainList" parameterType="java.util.Map" resultType="member.bean.ComplainDTO">
      select * from(
         select rownum rn, tt.* from
         	(select * from complain order by complain_seq desc)tt)
               where rn between #{startNum} and #{endNum} 
   </select>

<!-- A.신고 리스트 개수 -->
   <select id="getComplainTotal" resultType="Integer">
      select count(*) from complain
   </select>

<!-- B.신고 검색 리스트 전체 출력 -->
   <select id="searchReportedMember" parameterType="java.util.Map" resultType="member.bean.ComplainDTO">
      <![CDATA[
      select * from
         (select rownum rn, tt.* from
         (select * from complain where ${searchType} like '%'||#{keyword}||'%' order by complain_seq desc)tt
         )where rn>=#{startNum} and rn<=#{endNum}
      ]]>
   </select>
<!-- B.신고 검색 리스트 개수 -->
   <select id="getTotalReportedMember" parameterType="java.util.Map" resultType="Integer">
      select count(*) from complain where ${searchType} like '%'||#{keyword}||'%'
   </select>
   
   
<!-- C.신고 검색 리스트 전체 출력 -->
   <select id="findWithdrawCate" parameterType="java.util.Map" resultType="member.bean.ComplainDTO">
      <![CDATA[
      select * from
         (select rownum rn, tt.* from
         (select * from complain where ${withdrawCate} is not null order by complain_seq desc)tt
         )where rn>=#{startNum} and rn<=#{endNum}
      ]]>
   </select>
<!-- C.신고 검색 리스트 개수 -->
   <select id="getCateBP" parameterType="java.util.Map" resultType="Integer">
      select count(*) from complain where ${withdrawCate} is not null
   </select>
   
   
<!--특정 회원 신고 회수 체크 -->
	<select id="totalReported" parameterType="String" resultType="Integer"> 
		select count(*) from complain where mem_id=#{id}
	</select>
   

<!-- C.신고 댓글 보이기 -->
   <select id="getCommentContent" parameterType="String" resultType="board.bean.CommentDTO">
      select * from comments where comment_seq=#{comment_seq} 
   </select>
<!-- C.신고 리뷰 보이기 -->
   <select id="getReviewContent" parameterType="String" resultType="store.bean.ReviewDTO">
      select * from comments where review_seq=#{review_seq}

   </select>
<!-- D.신고내용 처리상태 변경 -->
	<update id="solveComplain" parameterType="java.util.Map" >
 		update complain set complain_status = #{complain_status} where complain_seq = #{complain_seq}
 	</update>
 	
<!-- E.게시글 블라인드 처리 -->
 	<update id="boardBlindComplain" parameterType="Integer" >
 		update boards set board_subject = '관리자에 의해 블라인드 처리된 글입니다.', board_content = '관리자에 의해 블라인드 처리된 글입니다.' where board_seq = #{board_seq}
 	</update>
<!--  E.댓글 블라인드 처리 -->
 	<update id="commentBlindComplain" parameterType="Integer" >
 		update comments set comment_content = '관리자에 의해 블라인드 처리된 글입니다.' where comment_seq = #{ comment_seq}
 	</update>
<!--  E.상품후기 블라인드 처리 -->
 	<update id="reviewBlindComplain" parameterType="Integer" >
 		update review set review_content = '관리자에 의해 블라인드 처리된 글입니다.' where review_seq = #{review_seq}
 	</update>
 	
<!-- [1:1문의관리]========================================================================= -->
<!-- A.1:1문의 리스트 전체 출력 -->
   <select id="getQnaList" parameterType="java.util.Map" resultType="admin.bean.QnaDTO">
      select * from(
         select rownum rn, tt.* from
         	(select * from qna order by qna_seq desc)tt)
               where rn between #{startNum} and #{endNum} 
   </select>

<!-- A.1:1문의 리스트 개수 -->
   <select id="getQnaTotal" resultType="Integer">
      select count(*) from qna
   </select>
   
   
<!-- B.1:1문의 조건검색 후 문의 내역 출력 -->
	<select id="getSearchQnaList" parameterType="java.util.Map" resultType="admin.bean.QnaDTO">
		<![CDATA[
		select * from
		(select rownum rn, tt.* from
		(select * from qna where ${searchType2} like '%'||#{keyword}||'%' order by qna_seq desc)tt
		)where rn>=#{startNum} and rn<=#{endNum}
		]]>
	</select>
<!-- B.1:1문의-조건검색 후 문의 내역 출력 페이징 -->
	<select id="totalG" parameterType="java.util.Map" resultType="Integer">
		select count(*) from qna where ${searchType2} like '%'||#{keyword}||'%'
	</select>
	
	
<!-- C.원하는 1:1문의글 가져오기 -->
   <select id="getQnaContent" parameterType="Integer" resultType="admin.bean.QnaDTO">
      select * from qna where qna_seq=#{qna_seq} 
   </select>
<!-- C.1:1문의 답글 달기 -->
 	<update id="writeAnswer" parameterType="java.util.Map" >
 		update qna set qna_answer = #{qna_answer}, qna_answerLogtime = sysdate where qna_seq = #{qna_seq}
 	</update>

 	
 	
<!-- [탈퇴회원관리]========================================================================= -->
<!-- A.탈퇴회원 리스트 전체 출력 -->
   <select id="getWithdrawList" parameterType="java.util.Map" resultType="admin.bean.WithdrawDTO">
      select * from(
         select rownum rn, tt.* from
         	(select * from withdraw
         		order by withdraw_seq desc)tt)
               where rn between #{startNum} and #{endNum}
               
   </select>

<!-- A.탈퇴회원 리스트 개수 -->
   <select id="getWithdrawTotal" resultType="Integer">
      select count(*) from withdraw
   </select>
   
   
<!-- B.조건검색 후 문의 내역 출력-->
	<select id="getSearchWithdrawList" parameterType="java.util.Map" resultType="admin.bean.WithdrawDTO">
		<![CDATA[
		select * from
		(select rownum rn, tt.* from
		(select * from withdraw 
			where withdraw_detailReason like '%'||#{keyword}||'%' order by withdraw_seq desc)tt
		)where rn>=#{startNum} and rn<=#{endNum}
		]]>
	</select>
<!-- B.조건검색 후 문의 내역 출력 페이징 -->
	<select id="totalH" parameterType="java.util.Map" resultType="Integer">
		select count(*) from withdraw where withdraw_detailReason like '%'||#{keyword}||'%'
	</select>
   
   
<!-- C.탈퇴사유  이용빈도 낮음 개수 -->
   <select id="getWithdraw_lowFrequencyTotal" resultType="Integer">
      select count(*) from withdraw where withdraw_lowFrequency is not null
   </select>
<!-- C.탈퇴회원 재가입 개수 -->
   <select id="getWithdraw_rejoinTotal" resultType="Integer">
      select count(*) from withdraw where withdraw_rejoin is not null
   </select>
<!-- C.탈퇴회원 상품 부족 개수 -->
   <select id="getWithdraw_lowContentsTotal" resultType="Integer">
      select count(*) from withdraw where withdraw_lowContents is not null
   </select>
<!-- C.탈퇴회원 개인정보보호 개수 -->
   <select id="getWithdraw_protectInfoTotal" resultType="Integer">
      select count(*) from withdraw where withdraw_protectInfo is not null
   </select>
<!-- C.탈퇴회원 혜택 부족 개수 -->
   <select id="getWithdraw_lowBenefitTotal" resultType="Integer">
      select count(*) from withdraw where withdraw_lowBenefit is not null
   </select>
<!-- C.탈퇴회원 기타사항 개수 -->  
    <select id="getWithdraw_othersTotal" resultType="Integer">
      select count(*) from withdraw where withdraw_others is not null
   </select>
     

<!-- [전체 상품관리]========================================================================= -->

<!-- 회원 영구정지 -->
	<update id="memberBlock" parameterType="String">
		update members set enabled=0 where mem_id=#{id}
	</update>
<!-- 회원 영구정지 복구 -->
	<update id="memberReleaseBtn" parameterType="String">
		update members set enabled=1 where mem_id=#{id}
	</update>
<!-- 물품_상세정보_카테고리 -->
	<select id="getCatagory" parameterType="String" resultType="admin.bean.AdminProductDTO">
		select * from product join category using(cate_code) where product_seq = #{seq}
	</select>
<!-- 물품_상세보기 대분류 -->
	<select id="getCate_code" parameterType="String" resultType="String">
		select cate_name from category
		where cate_code=(select cate_parent from category where cate_code=#{cate_code})
	</select>
	
	

	

<!-- [전체상점관리]========================================================================= -->	
<!-- 상점_상세조회_상품정보_판매중 -->
	<select id="sale_productSpan" parameterType="String" resultType="Integer"> 
		select count(product_manage) from product where mem_id=#{id} and product_manage=1
	</select>
<!-- 상점_상세조회_상품정보_예약중 -->
	<select id="reservation_productSpan" parameterType="String" resultType="Integer"> 
		select count(product_manage) from product where mem_id=#{id} and product_manage=2
	</select>
<!-- 상점_상세조회_상품정보_판매완료 -->
	<select id="sold_productSpan" parameterType="String" resultType="Integer"> 
		select count(product_manage) from product where mem_id=#{id} and product_manage=3
	</select>

<!-- 총 구매한 물건 개수 -->
	<select id="totalBuyProduct" parameterType="String" resultType="Integer"> 
		select count(*) from purchase where my_id=#{id}
	</select>


</mapper>
